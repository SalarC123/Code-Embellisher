/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!******************!*\
  !*** ./Novus.js ***!
  \******************/
eval("// COMMON DOM VARIABLES\n\nlet input = document.querySelector('.main-input')\nlet displayScreen = document.querySelector('#display-screen')\nconst displayMenu = document.querySelector('#display-menu')\nconst tabs = document.querySelector('#tabs')\nconst addTabButton = document.querySelector('#new-tab')\nlet tabColorInput = document.querySelector('#tab-color')\nlet themes = document.querySelector('.themes')\nlet displayContent = document.querySelector('#display-content')\nlet footerCopyright = document.querySelector('footer p:last-child')\n\n// Changes copyright year to the current year\nwindow.addEventListener('load', () => {\n    footerCopyright.innerText += ' ' + new Date().toLocaleDateString('en-us').slice(-4)\n})\n\n\n// Give main tab the highlighted effect\nlet firstTab = document.querySelector('#tabs li:first-child')\nfirstTab.style.backgroundColor = tabColorInput.value\n\n// EXPAND ROW + DIV SIZE WHEN TYPING\n\nlet currentInput = input;\nlet currentTab = tabs.children[0]\n\nfunction adjustBoxSize(elem = currentInput) {\n    elem.style.height = \"1px\";\n    elem.style.height = (elem.scrollHeight)+\"px\"\n}\nwindow.adjustBoxSize = adjustBoxSize;\n\n// ADD NEW TAB ON BUTTON CLICK\n\nlet numOfTabs = 1 \nlet maxNumOfTabs = 4\nfunction addTab() {\n    if (numOfTabs < maxNumOfTabs) {\n        let newLi = document.createElement('LI')\n\n        // Add name\n        answer = prompt('Tab Name')\n        if (answer && answer.length < 45) {  \n            newLi.innerText = answer                 // ADD FUNCTION TO CHANGE FIRST TAB\n            tabs.insertBefore(newLi, addTabButton)\n            numOfTabs++\n        }\n\n        // Create a textarea for the new tab\n        let clonedInput = input.cloneNode(true)\n        clonedInput.classList.add('cloned', `tab-number-${numOfTabs}`)\n        \n        clonedInput.setAttribute('oninput', 'adjustBoxSize()')\n        clonedInput.style.display = 'none'\n        clonedInput.value = ''\n\n        displayContent.appendChild(clonedInput)\n    }\n}\nwindow.addTab = addTab;\n\n// CHANGE TAB ON CLICK\n\ntabs.addEventListener('click', (e) => {\n\n    if (e.target instanceof HTMLLIElement && !(e.target == currentTab)) {\n\n        // Toggle the color of the clicked tab\n        let highlightedTab = document.querySelector('.highlighted')\n        highlightedTab.classList.remove('highlighted')\n        highlightedTab.style.backgroundColor = addTabButton.style.backgroundColor\n        e.target.classList.add('highlighted')\n        e.target.style.backgroundColor = displayMenu.style.backgroundColor\n\n        // removes all other textareas from view\n        Array.from(document.querySelectorAll('textarea')).forEach(function (elem) {\n            elem.style.display = 'none'\n        })\n\n        // Finds index of clicked tab\n        childNum = Array.from(e.target.parentElement.childNodes)\n            .filter(\n                elem => elem instanceof HTMLLIElement\n            ).indexOf(e.target) + 1\n\n        // Displays new textarea\n        inputForTab = document.querySelector(`textarea:nth-child(${childNum})`)\n        inputForTab.style.display = 'block'\n\n        currentInput = inputForTab\n        currentTab = tabs.children[childNum - 1]\n    }\n})\n\n\n// CHANGE TAB AND BUTTON OUTLIINE COLOR\n\nbuttonsWithOutlines = [\n    themes, \n    document.querySelector('.show-hide-tabs button:nth-child(2)'), \n    document.querySelector('.show-hide-tabs button:nth-child(3)'),\n    document.querySelector('.font input'),\n    document.querySelector('.reset button'),\n    document.querySelector('.font-families'),\n    document.querySelector('.download button')\n]\n\ntabColorInput.addEventListener('change', (e) => {\n    tabColor = e.target.value\n    newTabColor = lightenOrDarkenColor(tabColor, 20)\n    displayMenu.style.backgroundColor = tabColor\n    let tabsLi = document.querySelectorAll('#tabs li')\n    tabsLi.forEach(elem => {\n        elem.style.backgroundColor = lightenOrDarkenColor(tabColor, 20)\n    })\n    \n    let highlightedTab = document.querySelector('.highlighted')\n    highlightedTab.style.backgroundColor = tabColor\n\n    tabs.style.backgroundColor = newTabColor\n    addTabButton.style.backgroundColor = newTabColor\n    for (item of buttonsWithOutlines) {\n        item.style.borderColor = tabColor\n    }\n})\n\n\n// https://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors\nfunction lightenOrDarkenColor(color, amount) {\n    var usePound = false;\n    if ( color[0] == \"#\" ) {\n        color = color.slice(1);\n        usePound = true;\n    }\n\n    var num = parseInt(color,16);\n\n    var r = (num >> 16) + amount;\n\n    if ( r > 255 ) r = 255;\n    else if  (r < 0) r = 0;\n\n    var b = ((num >> 8) & 0x00FF) + amount;\n\n    if ( b > 255 ) b = 255;\n    else if  (b < 0) b = 0;\n\n    var g = (num & 0x0000FF) + amount;\n\n    if ( g > 255 ) g = 255;\n    else if  ( g < 0 ) g = 0;\n\n    return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n}\nwindow.lightenOrDarkenColor = lightenOrDarkenColor\n\n\n// LISTEN FOR \"TAB\" BUTTON WHILE IN THE TEXT EDITOR\n\n// input.addEventListener('keydown', function(e) {\n//     if (e.key == 'Tab') {\n//         e.preventDefault()\n//         let startPosition = input.selectionStart\n//         startPosition += '    '\n//         https://stackoverflow.com/questions/34528022/resize-textarea-with-div\n//     }\n// })\n\n\n// SHOW NAVBAR LINKS THAT WERE HIDDEN DURING WINDOW RESIZE\n\nfunction openHamburgerMenu() {\n    document.querySelector('.hamburger-display').classList.toggle('opened')\n}\nwindow.openHamburgerMenu = openHamburgerMenu;\n\n// CHANGE THEME \n\nlet json;\n\nfetch('./themes.json')\n.then(res => res.json())\n.then(data => json = data)\n\nthemes.addEventListener('change', (e) => {\n    displayScreen.style.backgroundColor = json[\"Themes\"][e.target.value]['mainBG']\n    document.querySelectorAll('textarea').forEach(elem => {\n        elem.style.backgroundColor = json[\"Themes\"][e.target.value]['textBG']\n    })\n    document.querySelectorAll('textarea').forEach(elem => {\n        elem.style.color = json[\"Themes\"][e.target.value]['fontColor']\n    })\n})\n\n\n// SHOW / HIDE TABS\n\nfunction showTabs() {\n    tabs.style.display = 'flex'\n}\nwindow.showTabs = showTabs;\n\nfunction hideTabs() {\n    tabs.style.display = 'none'\n}\nwindow.hideTabs = hideTabs;\n\n\n// CHANGE FONT SIZE\n\nlet fontInput = document.querySelector('.font input')\nlet fontError = document.querySelector('.font-error')\n\nfontInput.addEventListener('input', (e) => {\n    let num = e.target.value\n    if (num > 10 && num < 50) {\n        currentInput.style.fontSize = num + 'px'\n        fontError.style.opacity = '0'\n        fontError.style.top = '-5%'\n    } else {\n        fontError.style.opacity = '1'\n        fontError.style.top = '5%'\n    }\n})\n\n// CHANGE FONT-FAMILY \n\nlet fontFamily = document.querySelector('.font-families')\n\nfontFamily.addEventListener('change', (e) => {\n    currentInput.style.fontFamily = e.target.value\n})\n\n// RESET STYLING\n\nfunction resetStyles() {\n    fontInput.value = 18\n    currentInput.style.fontSize = '18px'\n    currentInput.style.fontFamily = 'Menlo'\n    currentInput.style.color = 'black'\n    currentInput.style.backgroundColor = 'whitesmoke'\n    displayScreen.style.backgroundColor = 'whitesmoke'\n    tabs.style.backgroundColor = 'rgb(216, 216, 216)'\n    displayMenu.style.backgroundColor = 'rgb(177, 177, 177)'\n    addTabButton.style.backgroundColor = 'rgb(216, 216, 216)'\n\n    let errorBox = document.querySelector('.font-error')\n    errorBox.style.opacity = 0\n    errorBox.style.top = '0%'\n\n    let allTabs =  document.querySelectorAll('#tabs li')\n    allTabs.forEach(elem => {\n        if (!(elem == document.querySelector('.highlighted'))) {\n            elem.style.backgroundColor = 'rgb(216, 216, 216)'\n        } else {\n            elem.style.backgroundColor = 'rgb(177, 177, 177)'\n        }\n    })\n}\nwindow.resetStyles = resetStyles;\n\n// DOWNLOAD PICTURE\n\nfunction download () { \n    // let randomDiv = document.createElement('div')\n    // randomDiv.style.marginRight = '0'\n    // randomDiv.innerText = input.value\n\n    // input.replaceWith(randomDiv)\n    html2canvas(displayScreen, {backgroundColor:null}).then( \n        function (canvas) { \n            let link = document.createElement(\"a\");\n\t\t\tlink.download = \"code.png\";\n\t\t\tlink.href = canvas.toDataURL(\"image/png\");\n\t\t\tlink.target = '_blank';\n\t\t\tlink.click();\n        }\n    )\n    // randomDiv.replaceWith(input)\n}\nwindow.download = download;\n\n\n// fetch('https://reqres.in/api/users', {\n//     method: \"POST\",\n//     headers: {\n//         \"Content-Type\": 'application/json'\n//     },\n//     body: JSON.stringify({\n//         age:13,\n//         height:62\n//     })\n// })\n// .then(res => res.json())\n//   .then(data => console.log(data))\n\n//# sourceURL=webpack:///./Novus.js?");
/******/ })()
;